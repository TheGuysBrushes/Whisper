/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import MessageExchange.MessageReceiver;
import MessageExchange.MessageDisplayer;
import MessageExchange.MessageSender;
import MessageExchange.MessageWriter;
import MessageExchange.Whisper;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import org.apache.log4j.Logger;

/**
 *
 * @author flodavid
 */
public class ClientGUI extends javax.swing.JFrame implements ActionListener, MessageDisplayer, MessageWriter {
    private final static Logger LOGGER = Logger.getLogger(ClientGUI.class);

//    private Client client;
    private MessageSender sender;
    private final String SENDER_NAME = "SENDER_NAME";
    
//    private String[] messages;
    
    /**
     * Creates new form ClientGUI
     * @param address : Address to connect to
     * @param s_port : which port to use
     */
    public ClientGUI(String address, String s_port) {
//        messages= new String[0];
        
        initComponents();
    }
    
        
    /**
     * Creates new form ClientGUI
//     * @param s_port : which port to use
     */
    public ClientGUI(/*String s_port*/) {
//        messages= new String[0];
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        tabPanel = new javax.swing.JPanel();
        messagesScrollPane = new javax.swing.JScrollPane();
        messagesList = new javax.swing.JList<>();
        messagePanel = new javax.swing.JPanel();
        messageField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Whisper");

        tabPanel.setLayout(new java.awt.BorderLayout());

        messagesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Début de la conversation", "======================"};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        messagesScrollPane.setViewportView(messagesList);

        tabPanel.add(messagesScrollPane, java.awt.BorderLayout.CENTER);

        messagePanel.setLayout(new java.awt.BorderLayout());

        messageField.setText(DEFAULT_TEXT);
        messageField.setToolTipText("");
        messageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageFieldKeyTyped(evt);
            }
        });
        messagePanel.add(messageField, java.awt.BorderLayout.CENTER);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        messagePanel.add(sendButton, java.awt.BorderLayout.LINE_END);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        messagePanel.add(cancelButton, java.awt.BorderLayout.LINE_START);

        tabPanel.add(messagePanel, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("<html><i>SENDER_NAME</i></html>", tabPanel);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Connect");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        messageField.setText(DEFAULT_TEXT);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        sendMessage();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void messageFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyTyped
        if (messageField.getText().equals(DEFAULT_TEXT)) messageField.setText("");
    }//GEN-LAST:event_messageFieldKeyTyped

    private void messageFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) sendMessage();
    }//GEN-LAST:event_messageFieldKeyPressed

    /**
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        Object source= e.getSource();

        if(source.getClass() == MessageReceiver.class) {
           messagesList.add(e.getActionCommand(), this);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        String address;
        if (args.length < 1) {
            address = "localhost";
        } else {
            address = args[0];
        }   
        //address = "192.168.99.107";

        String s_port;
        if (args.length < 2) {
            s_port = "2000";
        } else {
            s_port = args[1];
        }
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, "Class non trouvée", ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, "Erreur d'instanciation", ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, "Accès illégal !", ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, "Les éléments d'interface ne sont pas supportés", ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ClientGUI(address, s_port).setVisible(true);
            
//                ClientGUI.client.stopChat();
//                client.closeConnection();
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField messageField;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JList<String> messagesList;
    private javax.swing.JScrollPane messagesScrollPane;
    private javax.swing.JButton sendButton;
    private javax.swing.JPanel tabPanel;
    // End of variables declaration//GEN-END:variables

//    private void addMessage(Whisper message) {
//        
//    }
    
    private void addMessage(String message) {
        javax.swing.AbstractListModel<String> listModel = (javax.swing.AbstractListModel<String>)messagesList.getModel();
        String[] messages= new String[listModel.getSize() + 1];
        
        int i= 0;
        for (; i < listModel.getSize(); ++i) {
            messages[i]= listModel.getElementAt(i);
        }
        messages[i]= message;
        
        messagesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = messages;
            @Override
            public int getSize() { return strings.length; }
            @Override
            public String getElementAt(int i) { return strings[i]; }
        });
    }
    
    @Override
    public void showMessage(String message) { 
        addMessage(SENDER_NAME+ " : " + message);
        
//        messagesList.add(new Component() {
//})

//        String[] new_messages= new String[messages.length +1];
//        
//        int i= 0;
//        for (; i < messages.length; ++i) {
//            new_messages[i]= messages[i];
//        }
//        messages= new_messages;
//        messages[i]= message;
    }

    @Override
    public void showMessage(Whisper message)     {
        if (message.hasBeenSendByMe()) {
            addMessage("ME : " + message.getContent());
        } else {
            addMessage(message.toString());
        }
    }

    @Override
    public void setMessageSender(MessageSender msgSender) {
        sender= msgSender;
    }

    public void sendMessage() {
        try {
            sender.sendMessage(messageField.getText());
            addMessage("ME : " + messageField.getText());
            messageField.setText(DEFAULT_TEXT);
        } catch (IOException e) {
            System.err.println("Impossible d'envoyer le message" + e.getMessage());
        }
    }

    @Override
    public void startSending() {
        setVisible(true);
    }
    

    @Override
    public void stopSending() {
        setVisible(false);
    }
}
